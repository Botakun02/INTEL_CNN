# -*- coding: utf-8 -*-
"""Intel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NkwRBhuaCsmzmGk5lNDJWwdWhrMwGkvy
"""

import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras import regularizers
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, AveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, CSVLogger
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.regularizers import l2
from tensorflow import keras
import numpy as np

!mkdir -p ~/.kaggle
!mv kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json


!kaggle datasets download -d moltean/fruits
!unzip fruits.zip -d fruits

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

train_dir = '/content/fruits/fruits-360_dataset/fruits-360/Training'
test_dir = '/content/fruits/fruits-360_dataset/fruits-360/Test'


train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    fill_mode='nearest',
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)


base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)
predictions = Dense(len(train_generator.class_indices), activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

for layer in base_model.layers:
    layer.trainable = False

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=1e-6)


history = model.fit(
    train_generator,
    epochs=5,
    validation_data=validation_generator,
    callbacks=[early_stopping, reduce_lr]
)

model.save('/content/best_model.h5')


test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

test_loss, test_acc = model.evaluate(test_generator)
print('Test accuracy:', test_acc)

model.save('/content/best_model.keras')

print(train_generator.class_indices)

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
from google.colab import files
import io
import matplotlib.pyplot as plt
from PIL import Image


model1 = load_model('/content/Bigger Model.h5')
model2 = load_model('/content/Final Model.h5')

class_labels_model1 = [
    'Apple Braeburn', 'Apple Crimson Snow', 'Apple Golden 1', 'Apple Golden 2',
    'Apple Golden 3', 'Apple Granny Smith', 'Apple Pink Lady', 'Apple Red 1',
    'Apple Red 2', 'Apple Red 3', 'Apple Red Delicious', 'Apple Red Yellow 1',
    'Apple Red Yellow 2', 'Apricot', 'Avocado', 'Avocado ripe', 'Banana',
    'Banana Lady Finger', 'Banana Red', 'Beetroot', 'Blueberry', 'Cactus fruit',
    'Cantaloupe 1', 'Cantaloupe 2', 'Carambula', 'Cauliflower', 'Cherry 1',
    'Cherry 2', 'Cherry Rainier', 'Cherry Wax Black', 'Cherry Wax Red', 'Cherry Wax Yellow',
    'Chestnut', 'Clementine', 'Cocos', 'Corn', 'Corn Husk', 'Cucumber Ripe',
    'Cucumber Ripe 2', 'Dates', 'Eggplant', 'Fig', 'Ginger Root', 'Granadilla',
    'Grape Blue', 'Grape Pink', 'Grape White', 'Grape White 2', 'Grape White 3',
    'Grape White 4', 'Grapefruit Pink', 'Grapefruit White', 'Guava', 'Hazelnut',
    'Huckleberry', 'Kaki', 'Kiwi', 'Kohlrabi', 'Kumquats', 'Lemon', 'Lemon Meyer',
    'Limes', 'Lychee', 'Mandarine', 'Mango', 'Mango Red', 'Mangostan', 'Maracuja',
    'Melon Piel de Sapo', 'Mulberry', 'Nectarine', 'Nectarine Flat', 'Nut Forest',
    'Nut Pecan', 'Onion Red', 'Onion Red Peeled', 'Onion White', 'Orange', 'Papaya',
    'Passion Fruit', 'Peach', 'Peach 2', 'Peach Flat', 'Pear', 'Pear 2', 'Pear Abate',
    'Pear Forelle', 'Pear Kaiser', 'Pear Monster', 'Pear Red', 'Pear Stone',
    'Pear Williams', 'Pepino', 'Pepper Green', 'Pepper Orange', 'Pepper Red',
    'Pepper Yellow', 'Physalis', 'Physalis with Husk', 'Pineapple', 'Pineapple Mini',
    'Pitahaya Red', 'Plum', 'Plum 2', 'Plum 3', 'Pomegranate', 'Pomelo Sweetie',
    'Potato Red', 'Potato Red Washed', 'Potato Sweet', 'Potato White', 'Quince',
    'Rambutan', 'Raspberry', 'Redcurrant', 'Salak', 'Strawberry', 'Strawberry Wedge',
    'Tamarillo', 'Tangelo', 'Tomato 1', 'Tomato 2', 'Tomato 3', 'Tomato 4',
    'Tomato Cherry Red', 'Tomato Heart', 'Tomato Maroon', 'Tomato Yellow',
    'Tomato not Ripened', 'Walnut', 'Watermelon'
]

class_labels_model2 = [
    'apple', 'banana', 'beetroot', 'bell pepper', 'cabbage', 'capsicum', 'carrot',
    'cauliflower', 'chilli pepper', 'corn', 'cucumber', 'eggplant', 'garlic', 'ginger',
    'grapes', 'jalepeno', 'kiwi', 'lemon', 'lettuce', 'mango', 'onion', 'orange',
    'paprika', 'pear', 'peas', 'pineapple', 'pomegranate', 'potato', 'raddish',
    'soy beans', 'spinach', 'sweetcorn', 'sweetpotato', 'tomato', 'turnip', 'watermelon'
]

def preprocess_image(image_path):
    image = load_img(image_path, target_size=(224, 224))
    img_array = img_to_array(image)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

def predict_class(model, class_labels, image_path):
    img_array = preprocess_image(image_path)
    predictions = model.predict(img_array)
    predicted_class = class_labels[np.argmax(predictions)]
    return predicted_class

uploaded = files.upload()
image_path = list(uploaded.keys())[0]

uploaded_image = Image.open(io.BytesIO(uploaded[image_path]))
plt.imshow(uploaded_image)
plt.axis('off')
plt.title("Uploaded Image")
plt.show()

predicted_class_model1 = predict_class(model1, class_labels_model1, image_path)
predicted_class_model2 = predict_class(model2, class_labels_model2, image_path)

print("Predicted Class 1 :", predicted_class_model1)
print("Predicted Class 2 :", predicted_class_model2)

import requests
from IPython.display import display, Image as IPImage
import matplotlib.pyplot as plt

app_id = '5a22ef17'
app_key = '5db384fcb07213bc78e4e6da94898e8a'

def get_recipes(predicted_class):

    url = f'https://api.edamam.com/search?q={predicted_class}&app_id={app_id}&app_key={app_key}'
    response = requests.get(url)
    data = response.json()
    recipes = []
    for recipe in data['hits']:
        recipe_title = recipe['recipe']['label']
        recipe_url = recipe['recipe']['url']
        recipe_image = recipe['recipe']['image']
        recipes.append((recipe_title, recipe_url, recipe_image))
    return recipes

recipes_model1 = get_recipes(predicted_class_model1)
recipes_model2 = get_recipes(predicted_class_model2)


def display_recipes(predicted_class, recipes):
    print(f"Recipes for '{predicted_class}':")
    for title, url, image_url in recipes:
        print(f'Recipe: {title}\nURL: {url}\n')
        response = requests.get(image_url)
        img = IPImage(response.content)
        display(img)

display_recipes(predicted_class_model1, recipes_model1)

display_recipes(predicted_class_model2, recipes_model2)

from google.colab import files

files.download('/content/best_model.h5')
files.download('/content/best_model.keras')